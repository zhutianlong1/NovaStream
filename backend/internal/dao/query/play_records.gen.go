// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/zhutianlong1/NovaStream/backend/internal/dao/model"
)

func newPlayRecord(db *gorm.DB, opts ...gen.DOOption) playRecord {
	_playRecord := playRecord{}

	_playRecord.playRecordDo.UseDB(db, opts...)
	_playRecord.playRecordDo.UseModel(&model.PlayRecord{})

	tableName := _playRecord.playRecordDo.TableName()
	_playRecord.ALL = field.NewAsterisk(tableName)
	_playRecord.ID = field.NewInt32(tableName, "id")
	_playRecord.Username = field.NewString(tableName, "username")
	_playRecord.Key = field.NewString(tableName, "key")
	_playRecord.Title = field.NewString(tableName, "title")
	_playRecord.SourceName = field.NewString(tableName, "source_name")
	_playRecord.Cover = field.NewString(tableName, "cover")
	_playRecord.Year = field.NewString(tableName, "year")
	_playRecord.IndexEpisode = field.NewInt32(tableName, "index_episode")
	_playRecord.TotalEpisodes = field.NewInt32(tableName, "total_episodes")
	_playRecord.PlayTime = field.NewInt32(tableName, "play_time")
	_playRecord.TotalTime = field.NewInt32(tableName, "total_time")
	_playRecord.SaveTime = field.NewTime(tableName, "save_time")
	_playRecord.SearchTitle = field.NewString(tableName, "search_title")

	_playRecord.fillFieldMap()

	return _playRecord
}

type playRecord struct {
	playRecordDo playRecordDo

	ALL           field.Asterisk
	ID            field.Int32
	Username      field.String
	Key           field.String
	Title         field.String
	SourceName    field.String
	Cover         field.String
	Year          field.String
	IndexEpisode  field.Int32
	TotalEpisodes field.Int32
	PlayTime      field.Int32
	TotalTime     field.Int32
	SaveTime      field.Time
	SearchTitle   field.String

	fieldMap map[string]field.Expr
}

func (p playRecord) Table(newTableName string) *playRecord {
	p.playRecordDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p playRecord) As(alias string) *playRecord {
	p.playRecordDo.DO = *(p.playRecordDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *playRecord) updateTableName(table string) *playRecord {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewInt32(table, "id")
	p.Username = field.NewString(table, "username")
	p.Key = field.NewString(table, "key")
	p.Title = field.NewString(table, "title")
	p.SourceName = field.NewString(table, "source_name")
	p.Cover = field.NewString(table, "cover")
	p.Year = field.NewString(table, "year")
	p.IndexEpisode = field.NewInt32(table, "index_episode")
	p.TotalEpisodes = field.NewInt32(table, "total_episodes")
	p.PlayTime = field.NewInt32(table, "play_time")
	p.TotalTime = field.NewInt32(table, "total_time")
	p.SaveTime = field.NewTime(table, "save_time")
	p.SearchTitle = field.NewString(table, "search_title")

	p.fillFieldMap()

	return p
}

func (p *playRecord) WithContext(ctx context.Context) IPlayRecordDo {
	return p.playRecordDo.WithContext(ctx)
}

func (p playRecord) TableName() string { return p.playRecordDo.TableName() }

func (p playRecord) Alias() string { return p.playRecordDo.Alias() }

func (p playRecord) Columns(cols ...field.Expr) gen.Columns { return p.playRecordDo.Columns(cols...) }

func (p *playRecord) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *playRecord) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 13)
	p.fieldMap["id"] = p.ID
	p.fieldMap["username"] = p.Username
	p.fieldMap["key"] = p.Key
	p.fieldMap["title"] = p.Title
	p.fieldMap["source_name"] = p.SourceName
	p.fieldMap["cover"] = p.Cover
	p.fieldMap["year"] = p.Year
	p.fieldMap["index_episode"] = p.IndexEpisode
	p.fieldMap["total_episodes"] = p.TotalEpisodes
	p.fieldMap["play_time"] = p.PlayTime
	p.fieldMap["total_time"] = p.TotalTime
	p.fieldMap["save_time"] = p.SaveTime
	p.fieldMap["search_title"] = p.SearchTitle
}

func (p playRecord) clone(db *gorm.DB) playRecord {
	p.playRecordDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p playRecord) replaceDB(db *gorm.DB) playRecord {
	p.playRecordDo.ReplaceDB(db)
	return p
}

type playRecordDo struct{ gen.DO }

type IPlayRecordDo interface {
	gen.SubQuery
	Debug() IPlayRecordDo
	WithContext(ctx context.Context) IPlayRecordDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPlayRecordDo
	WriteDB() IPlayRecordDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPlayRecordDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPlayRecordDo
	Not(conds ...gen.Condition) IPlayRecordDo
	Or(conds ...gen.Condition) IPlayRecordDo
	Select(conds ...field.Expr) IPlayRecordDo
	Where(conds ...gen.Condition) IPlayRecordDo
	Order(conds ...field.Expr) IPlayRecordDo
	Distinct(cols ...field.Expr) IPlayRecordDo
	Omit(cols ...field.Expr) IPlayRecordDo
	Join(table schema.Tabler, on ...field.Expr) IPlayRecordDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPlayRecordDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPlayRecordDo
	Group(cols ...field.Expr) IPlayRecordDo
	Having(conds ...gen.Condition) IPlayRecordDo
	Limit(limit int) IPlayRecordDo
	Offset(offset int) IPlayRecordDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPlayRecordDo
	Unscoped() IPlayRecordDo
	Create(values ...*model.PlayRecord) error
	CreateInBatches(values []*model.PlayRecord, batchSize int) error
	Save(values ...*model.PlayRecord) error
	First() (*model.PlayRecord, error)
	Take() (*model.PlayRecord, error)
	Last() (*model.PlayRecord, error)
	Find() ([]*model.PlayRecord, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PlayRecord, err error)
	FindInBatches(result *[]*model.PlayRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.PlayRecord) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPlayRecordDo
	Assign(attrs ...field.AssignExpr) IPlayRecordDo
	Joins(fields ...field.RelationField) IPlayRecordDo
	Preload(fields ...field.RelationField) IPlayRecordDo
	FirstOrInit() (*model.PlayRecord, error)
	FirstOrCreate() (*model.PlayRecord, error)
	FindByPage(offset int, limit int) (result []*model.PlayRecord, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPlayRecordDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p playRecordDo) Debug() IPlayRecordDo {
	return p.withDO(p.DO.Debug())
}

func (p playRecordDo) WithContext(ctx context.Context) IPlayRecordDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p playRecordDo) ReadDB() IPlayRecordDo {
	return p.Clauses(dbresolver.Read)
}

func (p playRecordDo) WriteDB() IPlayRecordDo {
	return p.Clauses(dbresolver.Write)
}

func (p playRecordDo) Session(config *gorm.Session) IPlayRecordDo {
	return p.withDO(p.DO.Session(config))
}

func (p playRecordDo) Clauses(conds ...clause.Expression) IPlayRecordDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p playRecordDo) Returning(value interface{}, columns ...string) IPlayRecordDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p playRecordDo) Not(conds ...gen.Condition) IPlayRecordDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p playRecordDo) Or(conds ...gen.Condition) IPlayRecordDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p playRecordDo) Select(conds ...field.Expr) IPlayRecordDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p playRecordDo) Where(conds ...gen.Condition) IPlayRecordDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p playRecordDo) Order(conds ...field.Expr) IPlayRecordDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p playRecordDo) Distinct(cols ...field.Expr) IPlayRecordDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p playRecordDo) Omit(cols ...field.Expr) IPlayRecordDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p playRecordDo) Join(table schema.Tabler, on ...field.Expr) IPlayRecordDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p playRecordDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPlayRecordDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p playRecordDo) RightJoin(table schema.Tabler, on ...field.Expr) IPlayRecordDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p playRecordDo) Group(cols ...field.Expr) IPlayRecordDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p playRecordDo) Having(conds ...gen.Condition) IPlayRecordDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p playRecordDo) Limit(limit int) IPlayRecordDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p playRecordDo) Offset(offset int) IPlayRecordDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p playRecordDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPlayRecordDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p playRecordDo) Unscoped() IPlayRecordDo {
	return p.withDO(p.DO.Unscoped())
}

func (p playRecordDo) Create(values ...*model.PlayRecord) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p playRecordDo) CreateInBatches(values []*model.PlayRecord, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p playRecordDo) Save(values ...*model.PlayRecord) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p playRecordDo) First() (*model.PlayRecord, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.PlayRecord), nil
	}
}

func (p playRecordDo) Take() (*model.PlayRecord, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.PlayRecord), nil
	}
}

func (p playRecordDo) Last() (*model.PlayRecord, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.PlayRecord), nil
	}
}

func (p playRecordDo) Find() ([]*model.PlayRecord, error) {
	result, err := p.DO.Find()
	return result.([]*model.PlayRecord), err
}

func (p playRecordDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PlayRecord, err error) {
	buf := make([]*model.PlayRecord, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p playRecordDo) FindInBatches(result *[]*model.PlayRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p playRecordDo) Attrs(attrs ...field.AssignExpr) IPlayRecordDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p playRecordDo) Assign(attrs ...field.AssignExpr) IPlayRecordDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p playRecordDo) Joins(fields ...field.RelationField) IPlayRecordDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p playRecordDo) Preload(fields ...field.RelationField) IPlayRecordDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p playRecordDo) FirstOrInit() (*model.PlayRecord, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.PlayRecord), nil
	}
}

func (p playRecordDo) FirstOrCreate() (*model.PlayRecord, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.PlayRecord), nil
	}
}

func (p playRecordDo) FindByPage(offset int, limit int) (result []*model.PlayRecord, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p playRecordDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p playRecordDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p playRecordDo) Delete(models ...*model.PlayRecord) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *playRecordDo) withDO(do gen.Dao) *playRecordDo {
	p.DO = *do.(*gen.DO)
	return p
}
