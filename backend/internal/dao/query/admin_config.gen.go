// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/zhutianlong1/NovaStream/backend/internal/dao/model"
)

func newAdminConfig(db *gorm.DB, opts ...gen.DOOption) adminConfig {
	_adminConfig := adminConfig{}

	_adminConfig.adminConfigDo.UseDB(db, opts...)
	_adminConfig.adminConfigDo.UseModel(&model.AdminConfig{})

	tableName := _adminConfig.adminConfigDo.TableName()
	_adminConfig.ALL = field.NewAsterisk(tableName)
	_adminConfig.ID = field.NewInt32(tableName, "id")
	_adminConfig.Config = field.NewString(tableName, "config")
	_adminConfig.UpdatedAt = field.NewTime(tableName, "updated_at")

	_adminConfig.fillFieldMap()

	return _adminConfig
}

type adminConfig struct {
	adminConfigDo adminConfigDo

	ALL       field.Asterisk
	ID        field.Int32
	Config    field.String
	UpdatedAt field.Time

	fieldMap map[string]field.Expr
}

func (a adminConfig) Table(newTableName string) *adminConfig {
	a.adminConfigDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a adminConfig) As(alias string) *adminConfig {
	a.adminConfigDo.DO = *(a.adminConfigDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *adminConfig) updateTableName(table string) *adminConfig {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt32(table, "id")
	a.Config = field.NewString(table, "config")
	a.UpdatedAt = field.NewTime(table, "updated_at")

	a.fillFieldMap()

	return a
}

func (a *adminConfig) WithContext(ctx context.Context) IAdminConfigDo {
	return a.adminConfigDo.WithContext(ctx)
}

func (a adminConfig) TableName() string { return a.adminConfigDo.TableName() }

func (a adminConfig) Alias() string { return a.adminConfigDo.Alias() }

func (a adminConfig) Columns(cols ...field.Expr) gen.Columns { return a.adminConfigDo.Columns(cols...) }

func (a *adminConfig) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *adminConfig) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 3)
	a.fieldMap["id"] = a.ID
	a.fieldMap["config"] = a.Config
	a.fieldMap["updated_at"] = a.UpdatedAt
}

func (a adminConfig) clone(db *gorm.DB) adminConfig {
	a.adminConfigDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a adminConfig) replaceDB(db *gorm.DB) adminConfig {
	a.adminConfigDo.ReplaceDB(db)
	return a
}

type adminConfigDo struct{ gen.DO }

type IAdminConfigDo interface {
	gen.SubQuery
	Debug() IAdminConfigDo
	WithContext(ctx context.Context) IAdminConfigDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAdminConfigDo
	WriteDB() IAdminConfigDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAdminConfigDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAdminConfigDo
	Not(conds ...gen.Condition) IAdminConfigDo
	Or(conds ...gen.Condition) IAdminConfigDo
	Select(conds ...field.Expr) IAdminConfigDo
	Where(conds ...gen.Condition) IAdminConfigDo
	Order(conds ...field.Expr) IAdminConfigDo
	Distinct(cols ...field.Expr) IAdminConfigDo
	Omit(cols ...field.Expr) IAdminConfigDo
	Join(table schema.Tabler, on ...field.Expr) IAdminConfigDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAdminConfigDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAdminConfigDo
	Group(cols ...field.Expr) IAdminConfigDo
	Having(conds ...gen.Condition) IAdminConfigDo
	Limit(limit int) IAdminConfigDo
	Offset(offset int) IAdminConfigDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAdminConfigDo
	Unscoped() IAdminConfigDo
	Create(values ...*model.AdminConfig) error
	CreateInBatches(values []*model.AdminConfig, batchSize int) error
	Save(values ...*model.AdminConfig) error
	First() (*model.AdminConfig, error)
	Take() (*model.AdminConfig, error)
	Last() (*model.AdminConfig, error)
	Find() ([]*model.AdminConfig, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AdminConfig, err error)
	FindInBatches(result *[]*model.AdminConfig, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.AdminConfig) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAdminConfigDo
	Assign(attrs ...field.AssignExpr) IAdminConfigDo
	Joins(fields ...field.RelationField) IAdminConfigDo
	Preload(fields ...field.RelationField) IAdminConfigDo
	FirstOrInit() (*model.AdminConfig, error)
	FirstOrCreate() (*model.AdminConfig, error)
	FindByPage(offset int, limit int) (result []*model.AdminConfig, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAdminConfigDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a adminConfigDo) Debug() IAdminConfigDo {
	return a.withDO(a.DO.Debug())
}

func (a adminConfigDo) WithContext(ctx context.Context) IAdminConfigDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a adminConfigDo) ReadDB() IAdminConfigDo {
	return a.Clauses(dbresolver.Read)
}

func (a adminConfigDo) WriteDB() IAdminConfigDo {
	return a.Clauses(dbresolver.Write)
}

func (a adminConfigDo) Session(config *gorm.Session) IAdminConfigDo {
	return a.withDO(a.DO.Session(config))
}

func (a adminConfigDo) Clauses(conds ...clause.Expression) IAdminConfigDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a adminConfigDo) Returning(value interface{}, columns ...string) IAdminConfigDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a adminConfigDo) Not(conds ...gen.Condition) IAdminConfigDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a adminConfigDo) Or(conds ...gen.Condition) IAdminConfigDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a adminConfigDo) Select(conds ...field.Expr) IAdminConfigDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a adminConfigDo) Where(conds ...gen.Condition) IAdminConfigDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a adminConfigDo) Order(conds ...field.Expr) IAdminConfigDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a adminConfigDo) Distinct(cols ...field.Expr) IAdminConfigDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a adminConfigDo) Omit(cols ...field.Expr) IAdminConfigDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a adminConfigDo) Join(table schema.Tabler, on ...field.Expr) IAdminConfigDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a adminConfigDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAdminConfigDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a adminConfigDo) RightJoin(table schema.Tabler, on ...field.Expr) IAdminConfigDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a adminConfigDo) Group(cols ...field.Expr) IAdminConfigDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a adminConfigDo) Having(conds ...gen.Condition) IAdminConfigDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a adminConfigDo) Limit(limit int) IAdminConfigDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a adminConfigDo) Offset(offset int) IAdminConfigDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a adminConfigDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAdminConfigDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a adminConfigDo) Unscoped() IAdminConfigDo {
	return a.withDO(a.DO.Unscoped())
}

func (a adminConfigDo) Create(values ...*model.AdminConfig) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a adminConfigDo) CreateInBatches(values []*model.AdminConfig, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a adminConfigDo) Save(values ...*model.AdminConfig) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a adminConfigDo) First() (*model.AdminConfig, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AdminConfig), nil
	}
}

func (a adminConfigDo) Take() (*model.AdminConfig, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AdminConfig), nil
	}
}

func (a adminConfigDo) Last() (*model.AdminConfig, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AdminConfig), nil
	}
}

func (a adminConfigDo) Find() ([]*model.AdminConfig, error) {
	result, err := a.DO.Find()
	return result.([]*model.AdminConfig), err
}

func (a adminConfigDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AdminConfig, err error) {
	buf := make([]*model.AdminConfig, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a adminConfigDo) FindInBatches(result *[]*model.AdminConfig, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a adminConfigDo) Attrs(attrs ...field.AssignExpr) IAdminConfigDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a adminConfigDo) Assign(attrs ...field.AssignExpr) IAdminConfigDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a adminConfigDo) Joins(fields ...field.RelationField) IAdminConfigDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a adminConfigDo) Preload(fields ...field.RelationField) IAdminConfigDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a adminConfigDo) FirstOrInit() (*model.AdminConfig, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AdminConfig), nil
	}
}

func (a adminConfigDo) FirstOrCreate() (*model.AdminConfig, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AdminConfig), nil
	}
}

func (a adminConfigDo) FindByPage(offset int, limit int) (result []*model.AdminConfig, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a adminConfigDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a adminConfigDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a adminConfigDo) Delete(models ...*model.AdminConfig) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *adminConfigDo) withDO(do gen.Dao) *adminConfigDo {
	a.DO = *do.(*gen.DO)
	return a
}
