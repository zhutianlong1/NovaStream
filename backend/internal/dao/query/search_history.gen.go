// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/zhutianlong1/NovaStream/backend/internal/dao/model"
)

func newSearchHistory(db *gorm.DB, opts ...gen.DOOption) searchHistory {
	_searchHistory := searchHistory{}

	_searchHistory.searchHistoryDo.UseDB(db, opts...)
	_searchHistory.searchHistoryDo.UseModel(&model.SearchHistory{})

	tableName := _searchHistory.searchHistoryDo.TableName()
	_searchHistory.ALL = field.NewAsterisk(tableName)
	_searchHistory.ID = field.NewInt32(tableName, "id")
	_searchHistory.Username = field.NewString(tableName, "username")
	_searchHistory.Keyword = field.NewString(tableName, "keyword")
	_searchHistory.CreatedAt = field.NewTime(tableName, "created_at")

	_searchHistory.fillFieldMap()

	return _searchHistory
}

type searchHistory struct {
	searchHistoryDo searchHistoryDo

	ALL       field.Asterisk
	ID        field.Int32
	Username  field.String
	Keyword   field.String
	CreatedAt field.Time

	fieldMap map[string]field.Expr
}

func (s searchHistory) Table(newTableName string) *searchHistory {
	s.searchHistoryDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s searchHistory) As(alias string) *searchHistory {
	s.searchHistoryDo.DO = *(s.searchHistoryDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *searchHistory) updateTableName(table string) *searchHistory {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt32(table, "id")
	s.Username = field.NewString(table, "username")
	s.Keyword = field.NewString(table, "keyword")
	s.CreatedAt = field.NewTime(table, "created_at")

	s.fillFieldMap()

	return s
}

func (s *searchHistory) WithContext(ctx context.Context) ISearchHistoryDo {
	return s.searchHistoryDo.WithContext(ctx)
}

func (s searchHistory) TableName() string { return s.searchHistoryDo.TableName() }

func (s searchHistory) Alias() string { return s.searchHistoryDo.Alias() }

func (s searchHistory) Columns(cols ...field.Expr) gen.Columns {
	return s.searchHistoryDo.Columns(cols...)
}

func (s *searchHistory) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *searchHistory) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 4)
	s.fieldMap["id"] = s.ID
	s.fieldMap["username"] = s.Username
	s.fieldMap["keyword"] = s.Keyword
	s.fieldMap["created_at"] = s.CreatedAt
}

func (s searchHistory) clone(db *gorm.DB) searchHistory {
	s.searchHistoryDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s searchHistory) replaceDB(db *gorm.DB) searchHistory {
	s.searchHistoryDo.ReplaceDB(db)
	return s
}

type searchHistoryDo struct{ gen.DO }

type ISearchHistoryDo interface {
	gen.SubQuery
	Debug() ISearchHistoryDo
	WithContext(ctx context.Context) ISearchHistoryDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISearchHistoryDo
	WriteDB() ISearchHistoryDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISearchHistoryDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISearchHistoryDo
	Not(conds ...gen.Condition) ISearchHistoryDo
	Or(conds ...gen.Condition) ISearchHistoryDo
	Select(conds ...field.Expr) ISearchHistoryDo
	Where(conds ...gen.Condition) ISearchHistoryDo
	Order(conds ...field.Expr) ISearchHistoryDo
	Distinct(cols ...field.Expr) ISearchHistoryDo
	Omit(cols ...field.Expr) ISearchHistoryDo
	Join(table schema.Tabler, on ...field.Expr) ISearchHistoryDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISearchHistoryDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISearchHistoryDo
	Group(cols ...field.Expr) ISearchHistoryDo
	Having(conds ...gen.Condition) ISearchHistoryDo
	Limit(limit int) ISearchHistoryDo
	Offset(offset int) ISearchHistoryDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISearchHistoryDo
	Unscoped() ISearchHistoryDo
	Create(values ...*model.SearchHistory) error
	CreateInBatches(values []*model.SearchHistory, batchSize int) error
	Save(values ...*model.SearchHistory) error
	First() (*model.SearchHistory, error)
	Take() (*model.SearchHistory, error)
	Last() (*model.SearchHistory, error)
	Find() ([]*model.SearchHistory, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SearchHistory, err error)
	FindInBatches(result *[]*model.SearchHistory, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SearchHistory) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISearchHistoryDo
	Assign(attrs ...field.AssignExpr) ISearchHistoryDo
	Joins(fields ...field.RelationField) ISearchHistoryDo
	Preload(fields ...field.RelationField) ISearchHistoryDo
	FirstOrInit() (*model.SearchHistory, error)
	FirstOrCreate() (*model.SearchHistory, error)
	FindByPage(offset int, limit int) (result []*model.SearchHistory, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISearchHistoryDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s searchHistoryDo) Debug() ISearchHistoryDo {
	return s.withDO(s.DO.Debug())
}

func (s searchHistoryDo) WithContext(ctx context.Context) ISearchHistoryDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s searchHistoryDo) ReadDB() ISearchHistoryDo {
	return s.Clauses(dbresolver.Read)
}

func (s searchHistoryDo) WriteDB() ISearchHistoryDo {
	return s.Clauses(dbresolver.Write)
}

func (s searchHistoryDo) Session(config *gorm.Session) ISearchHistoryDo {
	return s.withDO(s.DO.Session(config))
}

func (s searchHistoryDo) Clauses(conds ...clause.Expression) ISearchHistoryDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s searchHistoryDo) Returning(value interface{}, columns ...string) ISearchHistoryDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s searchHistoryDo) Not(conds ...gen.Condition) ISearchHistoryDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s searchHistoryDo) Or(conds ...gen.Condition) ISearchHistoryDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s searchHistoryDo) Select(conds ...field.Expr) ISearchHistoryDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s searchHistoryDo) Where(conds ...gen.Condition) ISearchHistoryDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s searchHistoryDo) Order(conds ...field.Expr) ISearchHistoryDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s searchHistoryDo) Distinct(cols ...field.Expr) ISearchHistoryDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s searchHistoryDo) Omit(cols ...field.Expr) ISearchHistoryDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s searchHistoryDo) Join(table schema.Tabler, on ...field.Expr) ISearchHistoryDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s searchHistoryDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISearchHistoryDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s searchHistoryDo) RightJoin(table schema.Tabler, on ...field.Expr) ISearchHistoryDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s searchHistoryDo) Group(cols ...field.Expr) ISearchHistoryDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s searchHistoryDo) Having(conds ...gen.Condition) ISearchHistoryDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s searchHistoryDo) Limit(limit int) ISearchHistoryDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s searchHistoryDo) Offset(offset int) ISearchHistoryDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s searchHistoryDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISearchHistoryDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s searchHistoryDo) Unscoped() ISearchHistoryDo {
	return s.withDO(s.DO.Unscoped())
}

func (s searchHistoryDo) Create(values ...*model.SearchHistory) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s searchHistoryDo) CreateInBatches(values []*model.SearchHistory, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s searchHistoryDo) Save(values ...*model.SearchHistory) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s searchHistoryDo) First() (*model.SearchHistory, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SearchHistory), nil
	}
}

func (s searchHistoryDo) Take() (*model.SearchHistory, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SearchHistory), nil
	}
}

func (s searchHistoryDo) Last() (*model.SearchHistory, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SearchHistory), nil
	}
}

func (s searchHistoryDo) Find() ([]*model.SearchHistory, error) {
	result, err := s.DO.Find()
	return result.([]*model.SearchHistory), err
}

func (s searchHistoryDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SearchHistory, err error) {
	buf := make([]*model.SearchHistory, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s searchHistoryDo) FindInBatches(result *[]*model.SearchHistory, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s searchHistoryDo) Attrs(attrs ...field.AssignExpr) ISearchHistoryDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s searchHistoryDo) Assign(attrs ...field.AssignExpr) ISearchHistoryDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s searchHistoryDo) Joins(fields ...field.RelationField) ISearchHistoryDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s searchHistoryDo) Preload(fields ...field.RelationField) ISearchHistoryDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s searchHistoryDo) FirstOrInit() (*model.SearchHistory, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SearchHistory), nil
	}
}

func (s searchHistoryDo) FirstOrCreate() (*model.SearchHistory, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SearchHistory), nil
	}
}

func (s searchHistoryDo) FindByPage(offset int, limit int) (result []*model.SearchHistory, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s searchHistoryDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s searchHistoryDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s searchHistoryDo) Delete(models ...*model.SearchHistory) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *searchHistoryDo) withDO(do gen.Dao) *searchHistoryDo {
	s.DO = *do.(*gen.DO)
	return s
}
