// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q             = new(Query)
	AdminConfig   *adminConfig
	Favorite      *favorite
	PlayRecord    *playRecord
	SearchHistory *searchHistory
	User          *user
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	AdminConfig = &Q.AdminConfig
	Favorite = &Q.Favorite
	PlayRecord = &Q.PlayRecord
	SearchHistory = &Q.SearchHistory
	User = &Q.User
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:            db,
		AdminConfig:   newAdminConfig(db, opts...),
		Favorite:      newFavorite(db, opts...),
		PlayRecord:    newPlayRecord(db, opts...),
		SearchHistory: newSearchHistory(db, opts...),
		User:          newUser(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	AdminConfig   adminConfig
	Favorite      favorite
	PlayRecord    playRecord
	SearchHistory searchHistory
	User          user
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:            db,
		AdminConfig:   q.AdminConfig.clone(db),
		Favorite:      q.Favorite.clone(db),
		PlayRecord:    q.PlayRecord.clone(db),
		SearchHistory: q.SearchHistory.clone(db),
		User:          q.User.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:            db,
		AdminConfig:   q.AdminConfig.replaceDB(db),
		Favorite:      q.Favorite.replaceDB(db),
		PlayRecord:    q.PlayRecord.replaceDB(db),
		SearchHistory: q.SearchHistory.replaceDB(db),
		User:          q.User.replaceDB(db),
	}
}

type queryCtx struct {
	AdminConfig   IAdminConfigDo
	Favorite      IFavoriteDo
	PlayRecord    IPlayRecordDo
	SearchHistory ISearchHistoryDo
	User          IUserDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		AdminConfig:   q.AdminConfig.WithContext(ctx),
		Favorite:      q.Favorite.WithContext(ctx),
		PlayRecord:    q.PlayRecord.WithContext(ctx),
		SearchHistory: q.SearchHistory.WithContext(ctx),
		User:          q.User.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
